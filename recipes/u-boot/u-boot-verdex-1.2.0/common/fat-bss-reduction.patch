Index: u-boot-1.2.0/fs/fat/fat.c
===================================================================
--- u-boot-1.2.0.orig/fs/fat/fat.c
+++ u-boot-1.2.0/fs/fat/fat.c
@@ -48,6 +48,7 @@ downcase(char *str)
 static  block_dev_desc_t *cur_dev = NULL;
 static unsigned long part_offset = 0;
 static int cur_part = 1;
+static __u8	 shared_fat_buffer[MAX_CLUSTSIZE];
 
 #define DOS_PART_TBL_OFFSET	0x1be
 #define DOS_PART_MAGIC_OFFSET	0x1fe
@@ -425,7 +426,6 @@ slot2str(dir_slot *slotptr, char *l_name
  * into 'retdent'
  * Return 0 on success, -1 otherwise.
  */
-__u8	 get_vfatname_block[MAX_CLUSTSIZE];
 static int
 get_vfatname(fsdata *mydata, int curclust, __u8 *cluster,
 	     dir_entry *retdent, char *l_name)
@@ -454,18 +454,18 @@ get_vfatname(fsdata *mydata, int curclus
 			FAT_ERROR("Invalid FAT entry\n");
 			return -1;
 		}
-		if (get_cluster(mydata, curclust, get_vfatname_block,
+		if (get_cluster(mydata, curclust, shared_fat_buffer,
 				mydata->clust_size * SECTOR_SIZE) != 0) {
 			FAT_DPRINT("Error: reading directory block\n");
 			return -1;
 		}
-		slotptr2 = (dir_slot*) get_vfatname_block;
+		slotptr2 = (dir_slot*) shared_fat_buffer;
 		while (slotptr2->id > 0x01) {
 			slotptr2++;
 		}
 		/* Save the real directory entry */
 		realdent = (dir_entry*)slotptr2 + 1;
-		while ((__u8*)slotptr2 >= get_vfatname_block) {
+		while ((__u8*)slotptr2 >= shared_fat_buffer) {
 			slot2str(slotptr2, l_name, &idx);
 			slotptr2--;
 		}
@@ -511,7 +511,6 @@ mkcksum(const char *str)
  * Get the directory entry associated with 'filename' from the directory
  * starting at 'startsect'
  */
-__u8 get_dentfromdir_block[MAX_CLUSTSIZE];
 static dir_entry *get_dentfromdir (fsdata * mydata, int startsect,
 				   char *filename, dir_entry * retdent,
 				   int dols)
@@ -525,12 +524,12 @@ static dir_entry *get_dentfromdir (fsdat
 	dir_entry *dentptr;
 	int i;
 
-	if (get_cluster (mydata, curclust, get_dentfromdir_block,
+	if (get_cluster (mydata, curclust, shared_fat_buffer,
 		 mydata->clust_size * SECTOR_SIZE) != 0) {
 	    FAT_DPRINT ("Error: reading directory block\n");
 	    return NULL;
 	}
-	dentptr = (dir_entry *) get_dentfromdir_block;
+	dentptr = (dir_entry *) shared_fat_buffer;
 	for (i = 0; i < DIRENTSPERCLUST; i++) {
 	    char s_name[14], l_name[256];
 
@@ -545,7 +544,7 @@ static dir_entry *get_dentfromdir (fsdat
 		    (dentptr->name[0] & LAST_LONG_ENTRY_MASK)) {
 		    prevcksum = ((dir_slot *) dentptr)
 			    ->alias_checksum;
-		    get_vfatname (mydata, curclust, get_dentfromdir_block,
+		    get_vfatname (mydata, curclust, shared_fat_buffer,
 				  dentptr, l_name);
 		    if (dols) {
 			int isdir = (dentptr->attr & ATTR_DIR);
@@ -717,7 +716,6 @@ read_bootsectandvi(boot_sector *bs, volu
 }
 
 
-__u8 do_fat_read_block[MAX_CLUSTSIZE];  /* Block buffer */
 long
 do_fat_read (const char *filename, void *buffer, unsigned long maxsize,
 	     int dols)
@@ -796,11 +794,11 @@ do_fat_read (const char *filename, void 
     while (1) {
 	int i;
 
-	if (disk_read (cursect, mydata->clust_size, do_fat_read_block) < 0) {
+	if (disk_read (cursect, mydata->clust_size, shared_fat_buffer) < 0) {
 	    FAT_DPRINT ("Error: reading rootdir block\n");
 	    return -1;
 	}
-	dentptr = (dir_entry *) do_fat_read_block;
+	dentptr = (dir_entry *) shared_fat_buffer;
 	for (i = 0; i < DIRENTSPERBLOCK; i++) {
 	    char s_name[14], l_name[256];
 
@@ -810,7 +808,7 @@ do_fat_read (const char *filename, void 
 		if ((dentptr->attr & ATTR_VFAT) &&
 		    (dentptr->name[0] & LAST_LONG_ENTRY_MASK)) {
 		    prevcksum = ((dir_slot *) dentptr)->alias_checksum;
-		    get_vfatname (mydata, 0, do_fat_read_block, dentptr, l_name);
+		    get_vfatname (mydata, 0, shared_fat_buffer, dentptr, l_name);
 		    if (dols == LS_ROOT) {
 			int isdir = (dentptr->attr & ATTR_DIR);
 			char dirc;
